import sqlalchemy as sa
import sqlalchemy.orm as orm
from sqlalchemy.orm import Session
import sqlalchemy.ext.declarative as dec

# этот файл будет отвечать за подключение к базе данных и создание сессии для работы с ней.

SqlAlchemyBase = dec.declarative_base()
# некоторая абстрактная декларативная база, в которой позднее будем наследовать все наши модели

__factory = None
# будем использовать factory для получения сессий подключения к нашей базе данных.


'''global_init принимает на вход АДРЕС БД, затем проверяет, не создали ли мы
уже фабрику подключений(то есть не вызываем ли мы функцию не первый раз). Если уже
создали, то завершаем работу, так как начальную инициализацию надо проводить только единожды.'''


def global_init(db_file):
    global __factory

    if __factory:
        return

    if not db_file or not db_file.strip():
        raise Exception("Необходимо указать файл-адрес базы данных.")
    # Проверяем, что нам указали непустой адрес базы данных

    '''создаем строку подключения connect_str
    (она состоит из типа базы данных[0], адреса до базы данных и параметров подключения), которую предаём Sqlalchemy
    для того, чтобы она выбрала правильный ДВИЖОК работы с базой данных (переменная engine).
    В нашем случае это будет движок для работы с SQLite базами данных.'''

    connect_str = f'sqlite:///{db_file.strip()}?check_same_thread=False'
    print(f"Подключение к базе данных по адресу {connect_str}")

    engine = sa.create_engine(connect_str, echo=True)  # Если в эхо(в функции create_engine) передадим True,
    # то в консоль будут выводиться SQL-запросы
    __factory = orm.sessionmaker(bind=engine)  # Наконец, создаем фабрику подключений к нашей базе данных,
    # которая будет работать с нужным нам движком.

    from . import __all_models  # Импортируем все из файла __all_models.py —
    # именно тут SQLalchemy узнает о всех наших моделях.

    SqlAlchemyBase.metadata.create_all(engine)  # Наконец, заставляем нашу базу данных создать все объекты,
    # которые она пока не создала. Обратите внимание: все таблицы,
    # которые были уже созданы в базе данных, останутся без изменений.


'''Функция create_session нужна для получения сессии подключения к нашей базе данных. 
Часть -> Session нужна лишь для того, чтобы явно указать PyCharm, 
что наша функция возвращает объект типа sqlalchemy.orm.Session и 
среда могла показывать нам подсказки далее.'''


def create_session() -> Session:
    global __factory
    return __factory()


'''В качестве завершающего штриха давайте добавим в main.py импорт содержимого файла db_session:
                from data_ORM import db_session'''

"""И перед запуском приложения app.run() добавим вызов глобальной инициализации всего, что связано с базой данных:
      db_session.global_init("db_ORM/blogs.db")
      И теперь после запуска мэйна по адресу выше появиться SQL файл blogs.db"""
